{"mappings":"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","sources":["<anon>","src/index.js","src/abi.json"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $ccce0a99ce9219de$exports = {};\n$ccce0a99ce9219de$exports = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newTweetLength\",\"type\":\"uint16\"}],\"name\":\"changeTweetLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tweet\",\"type\":\"string\"}],\"name\":\"createTweet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"likeTweet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unlikeTweet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllTweets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"}],\"internalType\":\"struct Twitter.Tweet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getTweet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"}],\"internalType\":\"struct Twitter.Tweet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TWEET_LENGTH\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tweets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]');\n\n\n// 2️⃣ Set your smart contract address 👇\nconst $35da740d59af89ba$var$contractAddress = \"0xe270F382e3AA0B07f6a962014700AC2Cb64c91e9\";\nlet $35da740d59af89ba$var$web3 = new Web3(window.ethereum);\nlet $35da740d59af89ba$var$contract = new $35da740d59af89ba$var$web3.eth.Contract((0, (/*@__PURE__*/$parcel$interopDefault($ccce0a99ce9219de$exports))), $35da740d59af89ba$var$contractAddress);\n// 3️⃣ connect to the contract using web3\n// HINT: https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#new-contract\n// let contract = YOUR CODE\nasync function $35da740d59af89ba$var$connectWallet() {\n    if (window.ethereum) {\n        const accounts = await ethereum // Or window.ethereum if you don't support EIP-6963.\n        .request({\n            method: \"eth_requestAccounts\"\n        }).catch((err)=>{\n            if (err.code === 4001) // EIP-1193 userRejectedRequest error.\n            // If this happens, the user rejected the connection request.\n            console.log(\"Please connect to MetaMask.\");\n            else console.error(err);\n        });\n        console.log(accounts);\n        // 1️⃣ Request Wallet Connection from Metamask\n        // ANSWER can be found here: https://docs.metamask.io/wallet/get-started/set-up-dev-environment/\n        // const accounts = YOUR CODE\n        $35da740d59af89ba$var$setConnected(accounts[0]);\n    } else {\n        console.error(\"No web3 provider detected\");\n        document.getElementById(\"connectMessage\").innerText = \"No web3 provider detected. Please install MetaMask.\";\n    }\n}\nasync function $35da740d59af89ba$var$createTweet(content) {\n    const accounts = await $35da740d59af89ba$var$web3.eth.getAccounts();\n    try {\n        await $35da740d59af89ba$var$contract.methods.createTweet(content).send({\n            from: accounts[0]\n        });\n        // 4️⃣ call the contract createTweet method in order to crete the actual TWEET\n        // HINT: https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#methods-mymethod-send\n        // use the \"await\" feature to wait for the function to finish execution\n        // what is await? https://javascript.info/async-await\n        // 7️⃣ Uncomment the displayTweets function! PRETTY EASY 🔥\n        // GOAL: reload tweets after creating a new tweet\n        $35da740d59af89ba$var$displayTweets(accounts[0]);\n    } catch (error) {\n        console.error(\"User rejected request:\", error);\n    }\n}\nasync function $35da740d59af89ba$var$displayTweets(userAddress) {\n    const tweetsContainer = document.getElementById(\"tweetsContainer\");\n    let tempTweets = [];\n    tweetsContainer.innerHTML = \"\";\n    tempTweets = await $35da740d59af89ba$var$contract.methods.getAllTweets(userAddress).call();\n    // 5️⃣ call the function getAllTweets from smart contract to get all the tweets\n    // HINT: https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#methods-mymethod-call\n    // tempTweets = await YOUR CODE\n    // we do this so we can sort the tweets  by timestamp\n    const tweets = [\n        ...tempTweets\n    ];\n    tweets.sort((a, b)=>b.timestamp - a.timestamp);\n    for(let i = 0; i < tweets.length; i++){\n        const tweetElement = document.createElement(\"div\");\n        tweetElement.className = \"tweet\";\n        const userIcon = document.createElement(\"img\");\n        userIcon.className = \"user-icon\";\n        userIcon.src = `https://robohash.org/${tweets[i].author}.png?size=100x100&set=set1`;\n        // https://avatars.dicebear.com/api/human/${tweets[i].author}.svg\n        // `;\n        userIcon.alt = \"User Icon\";\n        tweetElement.appendChild(userIcon);\n        const tweetInner = document.createElement(\"div\");\n        tweetInner.className = \"tweet-inner\";\n        tweetInner.innerHTML += `\n        <div class=\"author\">${$35da740d59af89ba$var$shortAddress(tweets[i].author)}</div>\n        <div class=\"content\">${tweets[i].content}</div>\n    `;\n        const likeButton = document.createElement(\"button\");\n        likeButton.className = \"like-button\";\n        likeButton.innerHTML = `\n        <i class=\"far fa-heart\"></i>\n        <span class=\"likes-count\">${tweets[i].likes}</span>\n    `;\n        likeButton.setAttribute(\"data-id\", tweets[i].id);\n        likeButton.setAttribute(\"data-author\", tweets[i].author);\n        $35da740d59af89ba$var$addLikeButtonListener(likeButton, userAddress, tweets[i].id, tweets[i].author);\n        tweetInner.appendChild(likeButton);\n        tweetElement.appendChild(tweetInner);\n        tweetsContainer.appendChild(tweetElement);\n    }\n}\nfunction $35da740d59af89ba$var$addLikeButtonListener(likeButton, address, id, author) {\n    likeButton.addEventListener(\"click\", async (e)=>{\n        e.preventDefault();\n        e.currentTarget.innerHTML = '<div class=\"spinner\"></div>';\n        e.currentTarget.disabled = true;\n        try {\n            await $35da740d59af89ba$var$likeTweet(author, id);\n            $35da740d59af89ba$var$displayTweets(address);\n        } catch (error) {\n            console.error(\"Error liking tweet:\", error);\n        }\n    });\n}\nfunction $35da740d59af89ba$var$shortAddress(address, startLength = 6, endLength = 4) {\n    return `${address.slice(0, startLength)}...${address.slice(-endLength)}`;\n}\nasync function $35da740d59af89ba$var$likeTweet(author, id) {\n    const accounts = await $35da740d59af89ba$var$web3.eth.getAccounts();\n    try {\n        await $35da740d59af89ba$var$contract.methods.likeTweet(author, id).send({\n            from: accounts[0]\n        });\n    // 8️⃣ call the likeTweet function from smart contract\n    // INPUT: author and id\n    // GOAL: Save the like in the smart contract\n    // HINT: don't forget to use await 😉 👇\n    } catch (error) {\n        console.error(\"User rejected request:\", error);\n    }\n}\nfunction $35da740d59af89ba$var$setConnected(address) {\n    document.getElementById(\"userAddress\").innerText = \"Connected: \" + $35da740d59af89ba$var$shortAddress(address);\n    document.getElementById(\"connectMessage\").style.display = \"none\";\n    document.getElementById(\"tweetForm\").style.display = \"block\";\n    // 6️⃣ Call the displayTweets function with address as input\n    // This is the function in the javascript code, not smart contract 😉\n    // GOAL: display all tweets after connecting to metamask\n    $35da740d59af89ba$var$displayTweets(address);\n}\ndocument.getElementById(\"connectWalletBtn\").addEventListener(\"click\", $35da740d59af89ba$var$connectWallet);\ndocument.getElementById(\"tweetForm\").addEventListener(\"submit\", async (e)=>{\n    e.preventDefault();\n    const content = document.getElementById(\"tweetContent\").value;\n    const tweetSubmitButton = document.getElementById(\"tweetSubmitBtn\");\n    tweetSubmitButton.innerHTML = '<div class=\"spinner\"></div>';\n    tweetSubmitButton.disabled = true;\n    try {\n        await $35da740d59af89ba$var$createTweet(content);\n    } catch (error) {\n        console.error(\"Error sending tweet:\", error);\n    } finally{\n        // Restore the original button text\n        tweetSubmitButton.innerHTML = \"Tweet\";\n        tweetSubmitButton.disabled = false;\n    }\n});\n\n\n//# sourceMappingURL=index.b8597375.js.map\n","import contractABI from \"./abi.json\";\n\n// 2️⃣ Set your smart contract address 👇\nconst contractAddress = \"0xe270F382e3AA0B07f6a962014700AC2Cb64c91e9\";\n\nlet web3 = new Web3(window.ethereum);\nlet contract = new web3.eth.Contract(contractABI, contractAddress);\n// 3️⃣ connect to the contract using web3\n// HINT: https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#new-contract\n// let contract = YOUR CODE\n\nasync function connectWallet() {\n  if (window.ethereum) {\n    const accounts = await ethereum // Or window.ethereum if you don't support EIP-6963.\n      .request({ method: \"eth_requestAccounts\" })\n      .catch((err) => {\n        if (err.code === 4001) {\n          // EIP-1193 userRejectedRequest error.\n          // If this happens, the user rejected the connection request.\n          console.log(\"Please connect to MetaMask.\");\n        } else {\n          console.error(err);\n        }\n      });\n    console.log(accounts);\n    // 1️⃣ Request Wallet Connection from Metamask\n    // ANSWER can be found here: https://docs.metamask.io/wallet/get-started/set-up-dev-environment/\n    // const accounts = YOUR CODE\n\n    setConnected(accounts[0]);\n  } else {\n    console.error(\"No web3 provider detected\");\n    document.getElementById(\"connectMessage\").innerText =\n      \"No web3 provider detected. Please install MetaMask.\";\n  }\n}\n\nasync function createTweet(content) {\n  const accounts = await web3.eth.getAccounts();\n  try {\n    await contract.methods.createTweet(content).send({ from: accounts[0] });\n    // 4️⃣ call the contract createTweet method in order to crete the actual TWEET\n    // HINT: https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#methods-mymethod-send\n    // use the \"await\" feature to wait for the function to finish execution\n    // what is await? https://javascript.info/async-await\n    // 7️⃣ Uncomment the displayTweets function! PRETTY EASY 🔥\n    // GOAL: reload tweets after creating a new tweet\n    displayTweets(accounts[0]);\n  } catch (error) {\n    console.error(\"User rejected request:\", error);\n  }\n}\n\nasync function displayTweets(userAddress) {\n  const tweetsContainer = document.getElementById(\"tweetsContainer\");\n  let tempTweets = [];\n  tweetsContainer.innerHTML = \"\";\n  tempTweets = await contract.methods.getAllTweets(userAddress).call();\n  // 5️⃣ call the function getAllTweets from smart contract to get all the tweets\n  // HINT: https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#methods-mymethod-call\n  // tempTweets = await YOUR CODE\n\n  // we do this so we can sort the tweets  by timestamp\n  const tweets = [...tempTweets];\n  tweets.sort((a, b) => b.timestamp - a.timestamp);\n  for (let i = 0; i < tweets.length; i++) {\n    const tweetElement = document.createElement(\"div\");\n    tweetElement.className = \"tweet\";\n\n    const userIcon = document.createElement(\"img\");\n    userIcon.className = \"user-icon\";\n    userIcon.src = `https://robohash.org/${tweets[i].author}.png?size=100x100&set=set1`;\n    // https://avatars.dicebear.com/api/human/${tweets[i].author}.svg\n    // `;\n    userIcon.alt = \"User Icon\";\n\n    tweetElement.appendChild(userIcon);\n\n    const tweetInner = document.createElement(\"div\");\n    tweetInner.className = \"tweet-inner\";\n\n    tweetInner.innerHTML += `\n        <div class=\"author\">${shortAddress(tweets[i].author)}</div>\n        <div class=\"content\">${tweets[i].content}</div>\n    `;\n\n    const likeButton = document.createElement(\"button\");\n    likeButton.className = \"like-button\";\n    likeButton.innerHTML = `\n        <i class=\"far fa-heart\"></i>\n        <span class=\"likes-count\">${tweets[i].likes}</span>\n    `;\n    likeButton.setAttribute(\"data-id\", tweets[i].id);\n    likeButton.setAttribute(\"data-author\", tweets[i].author);\n\n    addLikeButtonListener(\n      likeButton,\n      userAddress,\n      tweets[i].id,\n      tweets[i].author\n    );\n    tweetInner.appendChild(likeButton);\n    tweetElement.appendChild(tweetInner);\n\n    tweetsContainer.appendChild(tweetElement);\n  }\n}\n\nfunction addLikeButtonListener(likeButton, address, id, author) {\n  likeButton.addEventListener(\"click\", async (e) => {\n    e.preventDefault();\n\n    e.currentTarget.innerHTML = '<div class=\"spinner\"></div>';\n    e.currentTarget.disabled = true;\n    try {\n      await likeTweet(author, id);\n      displayTweets(address);\n    } catch (error) {\n      console.error(\"Error liking tweet:\", error);\n    }\n  });\n}\n\nfunction shortAddress(address, startLength = 6, endLength = 4) {\n  return `${address.slice(0, startLength)}...${address.slice(-endLength)}`;\n}\n\nasync function likeTweet(author, id) {\n  const accounts = await web3.eth.getAccounts();\n  try {\n    await contract.methods.likeTweet(author, id).send({ from: accounts[0] });\n    // 8️⃣ call the likeTweet function from smart contract\n    // INPUT: author and id\n    // GOAL: Save the like in the smart contract\n    // HINT: don't forget to use await 😉 👇\n  } catch (error) {\n    console.error(\"User rejected request:\", error);\n  }\n}\n\nfunction setConnected(address) {\n  document.getElementById(\"userAddress\").innerText =\n    \"Connected: \" + shortAddress(address);\n  document.getElementById(\"connectMessage\").style.display = \"none\";\n  document.getElementById(\"tweetForm\").style.display = \"block\";\n\n  // 6️⃣ Call the displayTweets function with address as input\n  // This is the function in the javascript code, not smart contract 😉\n  // GOAL: display all tweets after connecting to metamask\n  displayTweets(address);\n}\n\ndocument\n  .getElementById(\"connectWalletBtn\")\n  .addEventListener(\"click\", connectWallet);\n\ndocument.getElementById(\"tweetForm\").addEventListener(\"submit\", async (e) => {\n  e.preventDefault();\n  const content = document.getElementById(\"tweetContent\").value;\n  const tweetSubmitButton = document.getElementById(\"tweetSubmitBtn\");\n  tweetSubmitButton.innerHTML = '<div class=\"spinner\"></div>';\n  tweetSubmitButton.disabled = true;\n  try {\n    await createTweet(content);\n  } catch (error) {\n    console.error(\"Error sending tweet:\", error);\n  } finally {\n    // Restore the original button text\n    tweetSubmitButton.innerHTML = \"Tweet\";\n    tweetSubmitButton.disabled = false;\n  }\n});\n","[\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint16\",\n        \"name\": \"newTweetLength\",\n        \"type\": \"uint16\"\n      }\n    ],\n    \"name\": \"changeTweetLength\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_tweet\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"createTweet\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"author\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"likeTweet\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"author\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"unlikeTweet\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"getAllTweets\",\n    \"outputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"id\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"author\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"content\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"timestamp\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"likes\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"internalType\": \"struct Twitter.Tweet[]\",\n        \"name\": \"\",\n        \"type\": \"tuple[]\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_i\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"getTweet\",\n    \"outputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"id\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"author\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"content\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"timestamp\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"likes\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"internalType\": \"struct Twitter.Tweet\",\n        \"name\": \"\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"MAX_TWEET_LENGTH\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint16\",\n        \"name\": \"\",\n        \"type\": \"uint16\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tweets\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"author\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"content\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"timestamp\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"likes\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n]\n"],"names":["a","$ccce0a99ce9219de$exports","JSON","parse","$35da740d59af89ba$var$web3","Web3","window","ethereum","$35da740d59af89ba$var$contract","eth","Contract","__esModule","default","$35da740d59af89ba$var$connectWallet","address","accounts","request","method","catch","err","code","console","log","error","document","getElementById","innerText","$35da740d59af89ba$var$shortAddress","style","display","$35da740d59af89ba$var$displayTweets","$35da740d59af89ba$var$createTweet","content","getAccounts","methods","createTweet","send","from","userAddress","tweetsContainer","innerHTML","tweets","getAllTweets","call","sort","b","timestamp","i","length","tweetElement","createElement","className","userIcon","src","author","alt","appendChild","tweetInner","likeButton","likes","setAttribute","id","$35da740d59af89ba$var$addLikeButtonListener","addEventListener","e","preventDefault","currentTarget","disabled","$35da740d59af89ba$var$likeTweet","startLength","endLength","slice","likeTweet","value","tweetSubmitButton"],"version":3,"file":"index.b8597375.js.map"}